% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/networktreeModelBased.R
\name{networktreeModelBased}
\alias{networktreeModelBased}
\title{Model-based recursive partitioning for networks}
\usage{
networktreeModelBased(data, splitVars, weights = NULL, type = c("cor",
  "pcor", "EBICglasso"), na.action, splitBy = "network", ...)
}
\arguments{
\item{data}{the cross-sectional dataset from which to compute the network}

\item{splitVars}{the variables with which to test network splitting. Can be vector, matrix, or dataframe}

\item{weights}{weights}

\item{type}{the type of network to compute. Can be "cor", "pcor", or "EBICglasso"}

\item{na.action}{a function which indicates what should happen when the data
contain missing values (\code{NA}s).}

\item{splitBy}{if "network", splits only by the correlations between variables.
if "data", considers means and variances of each variable (i.e., mu and sigma)}

\item{...}{additional arguments passed cortrafo}
}
\value{
\code{\link{networktreeModelBased}} returns a list of class "\code{}" which contains:
}
\description{
Computes a tree model with networks as the end branches using model-based
recursive partitioning. Wraps the mob function from partykit.
See also networktreeConditional
}
\examples{
\donttest{
set.seed(1)
d <- data.frame(trend = 1:200, foo = runif(200, -1, 1))
d <- cbind(d, rbind(
  rmvnorm(100, mean = c(0, 0, 0),
          sigma = matrix(c(1, 0.5, 0.5, 0.5, 1, 0.5, 0.5, 0.5, 1), ncol = 3)),
  rmvnorm(100, mean = c(0, 0, 0),
          sigma = matrix(c(1, 0, 0.5, 0, 1, 0.5, 0.5, 0.5, 1), ncol = 3))
))
colnames(d)[3:5] <- paste0("y", 1:3)

## Now use the function
tree1 <- networktreeModelBased(netdata=d[,3:5], splitvars=d[,1:2])

}
}
