% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/networktree.R
\name{networktree.default}
\alias{networktree.default}
\title{Tree model (partitioning) with networks at the end of branches}
\usage{
\method{networktree}{default}(nodeVars, splitVars, type = c("cor", "pcor",
  "EBICglasso"), method = c("ModelBased", "Conditional"),
  splitBy = "network", na.action, weights = NULL, ...)
}
\arguments{
\item{nodeVars}{the variables with which to compute the network. Can be vector, matrix, or dataframe}

\item{splitVars}{the variables with which to test split the network. Can be vector, matrix, or dataframe}

\item{type}{the type of network to compute. Can be "cor", "pcor", or "EBICglasso". Note that networks
are always stored internally as correlation matrices, but will be auto-adjusted in plots etc. according
to type}

\item{method}{"ModelBased" or "Conditional"}

\item{splitBy}{if "network", splits only by the correlations between variables.
if "data", considers means and variances of each variable (i.e., mu and sigma).
Available for method="ModelBased" only.}

\item{na.action}{a function which indicates what should happen when the data
contain missing values (\code{NA}s).}

\item{weights}{weights}

\item{...}{additional arguments passed to mob_control (ModelBased) or cortrafo (Conditional)}
}
\description{
Computes a tree model with networks at the end of branches. Can use
model-based recursive partitioning or conditional inference.
}
\details{
Wraps the mob() and ctree() functions from the partykit package.

Default S3 method shown here. For a formula interface, see ?networktree.formula
}
\examples{
\donttest{
set.seed(1)
d <- data.frame(trend = 1:200, foo = runif(200, -1, 1))
d <- cbind(d, rbind(
  rmvnorm(100, mean = c(0, 0, 0),
          sigma = matrix(c(1, 0.5, 0.5, 0.5, 1, 0.5, 0.5, 0.5, 1), ncol = 3)),
  rmvnorm(100, mean = c(0, 0, 0),
          sigma = matrix(c(1, 0, 0.5, 0, 1, 0.5, 0.5, 0.5, 1), ncol = 3))
))
colnames(d)[3:5] <- paste0("y", 1:3)

## Now use the function
tree1 <- networktree(nodeVars=d[,3:5], splitVars=d[,1:2])

}
}
